# -*- coding: utf-8 -*-
"""YoloV4_FisDetection1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AzmyLDh1iKZ1yDVflP8Lo7ai1ItPaLGp
"""

# Commented out IPython magic to ensure Python compatibility.
import cv2
import matplotlib.pyplot as plt
# %matplotlib inline
import os

# CUDA: Let's check that Nvidia CUDA drivers are already pre-installed and which version is it.
!/usr/local/cuda/bin/nvcc --version
# We need to install the correct cuDNN according to this output

!nvidia-smi

import os
os.environ['GPU_TYPE'] = str(os.popen('nvidia-smi --query-gpu=name --format=csv,noheader').read())

def getGPUArch(argument):
  try:
    argument = argument.strip()
    # All Colab GPUs
    archTypes = {
        "Tesla V100-SXM2-16GB": "-gencode arch=compute_70,code=[sm_70,compute_70]",
        "Tesla K80": "-gencode arch=compute_37,code=sm_37",
        "Tesla T4": "-gencode arch=compute_75,code=[sm_75,compute_75]",
        "Tesla P40": "-gencode arch=compute_61,code=sm_61",
        "Tesla P4": "-gencode arch=compute_61,code=sm_61",
        "Tesla P100-PCIE-16GB": "-gencode arch=compute_60,code=sm_60"

      }
    return archTypes[argument]
  except KeyError:
    return "GPU must be added to GPU Commands"
os.environ['ARCH_VALUE'] = getGPUArch(os.environ['GPU_TYPE'])

print("GPU Type: " + os.environ['GPU_TYPE'])
print("ARCH Value: " + os.environ['ARCH_VALUE'])

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/
# %rm -rf darknet

#we clone the fork of darknet maintained by roboflow
#small changes have been made to configure darknet for training
!git clone https://github.com/roboflow-ai/darknet.git

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/darknet/
# %rm Makefile

# Commented out IPython magic to ensure Python compatibility.
# #colab occasionally shifts dependencies around, at the time of authorship, this Makefile works for building Darknet on Colab
# 
# %%writefile Makefile
# GPU=1
# CUDNN=1
# CUDNN_HALF=0
# OPENCV=1
# AVX=0
# OPENMP=0
# LIBSO=1
# ZED_CAMERA=0
# ZED_CAMERA_v2_8=0
# 
# # set GPU=1 and CUDNN=1 to speedup on GPU
# # set CUDNN_HALF=1 to further speedup 3 x times (Mixed-precision on Tensor Cores) GPU: Volta, Xavier, Turing and higher
# # set AVX=1 and OPENMP=1 to speedup on CPU (if error occurs then set AVX=0)
# # set ZED_CAMERA=1 to enable ZED SDK 3.0 and above
# # set ZED_CAMERA_v2_8=1 to enable ZED SDK 2.X
# 
# USE_CPP=0
# DEBUG=0
# 
# ARCH= -gencode arch=compute_35,code=sm_35 \
#       -gencode arch=compute_50,code=[sm_50,compute_50] \
#       -gencode arch=compute_52,code=[sm_52,compute_52] \
# 	    -gencode arch=compute_61,code=[sm_61,compute_61] \
#       -gencode arch=compute_37,code=sm_37
# 
# ARCH= -gencode arch=compute_60,code=sm_60
# 
# OS := $(shell uname)
# 
# VPATH=./src/
# EXEC=darknet
# OBJDIR=./obj/
# 
# ifeq ($(LIBSO), 1)
# LIBNAMESO=libdarknet.so
# APPNAMESO=uselib
# endif
# 
# ifeq ($(USE_CPP), 1)
# CC=g++
# else
# CC=gcc
# endif
# 
# CPP=g++ -std=c++11
# NVCC=nvcc
# OPTS=-Ofast
# LDFLAGS= -lm -pthread
# COMMON= -Iinclude/ -I3rdparty/stb/include
# CFLAGS=-Wall -Wfatal-errors -Wno-unused-result -Wno-unknown-pragmas -fPIC
# 
# ifeq ($(DEBUG), 1)
# #OPTS= -O0 -g
# #OPTS= -Og -g
# COMMON+= -DDEBUG
# CFLAGS+= -DDEBUG
# else
# ifeq ($(AVX), 1)
# CFLAGS+= -ffp-contract=fast -mavx -mavx2 -msse3 -msse4.1 -msse4.2 -msse4a
# endif
# endif
# 
# CFLAGS+=$(OPTS)
# 
# ifneq (,$(findstring MSYS_NT,$(OS)))
# LDFLAGS+=-lws2_32
# endif
# 
# ifeq ($(OPENCV), 1)
# COMMON+= -DOPENCV
# CFLAGS+= -DOPENCV
# LDFLAGS+= `pkg-config --libs opencv4 2> /dev/null || pkg-config --libs opencv`
# COMMON+= `pkg-config --cflags opencv4 2> /dev/null || pkg-config --cflags opencv`
# endif
# 
# ifeq ($(OPENMP), 1)
# CFLAGS+= -fopenmp
# LDFLAGS+= -lgomp
# endif
# 
# ifeq ($(GPU), 1)
# COMMON+= -DGPU -I/usr/local/cuda/include/
# CFLAGS+= -DGPU
# ifeq ($(OS),Darwin) #MAC
# LDFLAGS+= -L/usr/local/cuda/lib -lcuda -lcudart -lcublas -lcurand
# else
# LDFLAGS+= -L/usr/local/cuda/lib64 -lcuda -lcudart -lcublas -lcurand
# endif
# endif
# 
# ifeq ($(CUDNN), 1)
# COMMON+= -DCUDNN
# ifeq ($(OS),Darwin) #MAC
# CFLAGS+= -DCUDNN -I/usr/local/cuda/include
# LDFLAGS+= -L/usr/local/cuda/lib -lcudnn
# else
# CFLAGS+= -DCUDNN -I/usr/local/cudnn/include
# LDFLAGS+= -L/usr/local/cudnn/lib64 -lcudnn
# endif
# endif
# 
# ifeq ($(CUDNN_HALF), 1)
# COMMON+= -DCUDNN_HALF
# CFLAGS+= -DCUDNN_HALF
# ARCH+= -gencode arch=compute_70,code=[sm_70,compute_70]
# endif
# 
# ifeq ($(ZED_CAMERA), 1)
# CFLAGS+= -DZED_STEREO -I/usr/local/zed/include
# ifeq ($(ZED_CAMERA_v2_8), 1)
# LDFLAGS+= -L/usr/local/zed/lib -lsl_core -lsl_input -lsl_zed
# #-lstdc++ -D_GLIBCXX_USE_CXX11_ABI=0
# else
# LDFLAGS+= -L/usr/local/zed/lib -lsl_zed
# #-lstdc++ -D_GLIBCXX_USE_CXX11_ABI=0
# endif
# endif
# 
# OBJ=image_opencv.o http_stream.o gemm.o utils.o dark_cuda.o convolutional_layer.o list.o image.o activations.o im2col.o col2im.o blas.o crop_layer.o dropout_layer.o maxpool_layer.o softmax_layer.o data.o matrix.o network.o connected_layer.o cost_layer.o parser.o option_list.o darknet.o detection_layer.o captcha.o route_layer.o writing.o box.o nightmare.o normalization_layer.o avgpool_layer.o coco.o dice.o yolo.o detector.o layer.o compare.o classifier.o local_layer.o swag.o shortcut_layer.o activation_layer.o rnn_layer.o gru_layer.o rnn.o rnn_vid.o crnn_layer.o demo.o tag.o cifar.o go.o batchnorm_layer.o art.o region_layer.o reorg_layer.o reorg_old_layer.o super.o voxel.o tree.o yolo_layer.o gaussian_yolo_layer.o upsample_layer.o lstm_layer.o conv_lstm_layer.o scale_channels_layer.o sam_layer.o
# ifeq ($(GPU), 1)
# LDFLAGS+= -lstdc++
# OBJ+=convolutional_kernels.o activation_kernels.o im2col_kernels.o col2im_kernels.o blas_kernels.o crop_layer_kernels.o dropout_layer_kernels.o maxpool_layer_kernels.o network_kernels.o avgpool_layer_kernels.o
# endif
# 
# OBJS = $(addprefix $(OBJDIR), $(OBJ))
# DEPS = $(wildcard src/*.h) Makefile include/darknet.h
# 
# all: $(OBJDIR) backup results setchmod $(EXEC) $(LIBNAMESO) $(APPNAMESO)
# 
# ifeq ($(LIBSO), 1)
# CFLAGS+= -fPIC
# 
# $(LIBNAMESO): $(OBJDIR) $(OBJS) include/yolo_v2_class.hpp src/yolo_v2_class.cpp
# 	$(CPP) -shared -std=c++11 -fvisibility=hidden -DLIB_EXPORTS $(COMMON) $(CFLAGS) $(OBJS) src/yolo_v2_class.cpp -o $@ $(LDFLAGS)
# 
# $(APPNAMESO): $(LIBNAMESO) include/yolo_v2_class.hpp src/yolo_console_dll.cpp
# 	$(CPP) -std=c++11 $(COMMON) $(CFLAGS) -o $@ src/yolo_console_dll.cpp $(LDFLAGS) -L ./ -l:$(LIBNAMESO)
# endif
# 
# $(EXEC): $(OBJS)
# 	$(CPP) -std=c++11 $(COMMON) $(CFLAGS) $^ -o $@ $(LDFLAGS)
# 
# $(OBJDIR)%.o: %.c $(DEPS)
# 	$(CC) $(COMMON) $(CFLAGS) -c $< -o $@
# 
# $(OBJDIR)%.o: %.cpp $(DEPS)
# 	$(CPP) -std=c++11 $(COMMON) $(CFLAGS) -c $< -o $@
# 
# $(OBJDIR)%.o: %.cu $(DEPS)
# 	$(NVCC) $(ARCH) $(COMMON) --compiler-options "$(CFLAGS)" -c $< -o $@
# 
# $(OBJDIR):
# 	mkdir -p $(OBJDIR)
# backup:
# 	mkdir -p backup
# results:
# 	mkdir -p results
# setchmod:
# 	chmod +x *.sh
# 
# .PHONY: clean
# 
# clean:
# 	rm -rf $(OBJS) $(EXEC) $(LIBNAMESO) $(APPNAMESO)

# Commented out IPython magic to ensure Python compatibility.
#install environment from the Makefile
#note if you are on Colab Pro this works on a P100 GPU
#if you are on Colab free, you may need to change the Makefile for the K80 GPU
#this goes for any GPU, you need to change the Makefile to inform darknet which GPU you are running on.
#note the Makefile above should work for you, if you need to tweak, try the below
# %cd /content/darknet/
!sed -i 's/OPENCV=0/OPENCV=1/g' Makefile
!sed -i 's/GPU=0/GPU=1/g' Makefile
!sed -i 's/CUDNN=0/CUDNN=1/g' Makefile
!sed -i "s/ARCH= -gencode arch=compute_60,code=sm_60/ARCH= ${ARCH_VALUE}/g" Makefile
!make

# Commented out IPython magic to ensure Python compatibility.
#download the newly released yolov4 ConvNet weights
# %cd /content/darknet
!wget https://github.com/AlexeyAB/darknet/releases/download/darknet_yolo_v3_optimal/yolov4.conv.137

!cp -r /content/drive/MyDrive/Fish_detection/valid /content/darknet/Fish_detection

!cp -r /content/drive/MyDrive/Fish_detection/train /content/darknet/Fish_detection

!rm /content/darknet/Fish_detection/train/labels/vid7_frame*.txt

data_loc="/content/darknet/Fish_detection"

# Commented out IPython magic to ensure Python compatibility.
#Set up training file directories for custom dataset
# %cd /content/darknet/
#%cp {data_loc}/train/_darknet.labels data/obj.names
# %mkdir data/obj

!ls /content/darknet/data/

# Commented out IPython magic to ensure Python compatibility.
#copy image and labels
# %cp {data_loc}/train/images/*.jpg data/obj/
#%cp {data_loc}/test/images/*.jpg data/obj/
# %cp {data_loc}/valid/images/*.jpg data/obj/

# %cp {data_loc}/train/labels/*.txt data/obj/
#%cp {data_loc}/test/labels/*.txt data/obj/
# %cp {data_loc}/valid/labels/*.txt data/obj/

with open('data/obj.data', 'w') as out:
  #out.write('classes = 15\n')
  out.write('classes = 5\n')
  out.write('train = data/train.txt\n')
  out.write('valid = data/valid.txt\n')
  #out.write('names = data/obj.names\n')
  out.write('names = data/obj_short.names\n')
  out.write('backup = backup/')

#drag and drop the data/obj.names or obj_short.names file

#write train file (just the image list)
import os

with open('data/train.txt', 'w') as out:
  for img in [f for f in os.listdir('/content/darknet/Fish_detection/train/images') if f.endswith('jpg')]:
    out.write('data/obj/' + img + '\n')

#write the valid file (just the image list)
import os

with open('data/valid.txt', 'w') as out:
  for img in [f for f in os.listdir('/content/darknet/Fish_detection/valid/images') if f.endswith('jpg')]:
    out.write('data/obj/' + img + '\n')

"""Writing custom training config for Yolov4"""

#we build config dynamically based on number of classes
#we build iteratively from base config files. This is the same file shape as cfg/yolo-obj.cfg
def file_len(fname):
  with open(fname) as f:
    for i, l in enumerate(f):
      pass
  return i + 1

num_classes = 5
print("writing config for a custom YOLOv4 detector detecting number of classes: " + str(num_classes))

#Instructions from the darknet repo
#change line max_batches to (classes*2000 but not less than number of training images, and not less than 6000), f.e. max_batches=6000 if you train for 3 classes
#change line steps to 80% and 90% of max_batches, f.e. steps=4800,5400
if os.path.exists('./cfg/custom-yolov4-detector.cfg'): os.remove('./cfg/custom-yolov4-detector.cfg')


with open('./cfg/custom-yolov4-detector.cfg', 'a') as f:
  f.write('[net]' + '\n')
  f.write('batch=64' + '\n')
  #####smaller subdivisions help the GPU run faster. 12 is optimal, but you might need to change to 24,36,64####
  f.write('subdivisions=24' + '\n') #24
  f.write('width=416' + '\n') #416
  f.write('height=416' + '\n')
  f.write('channels=3' + '\n')
  f.write('momentum=0.949' + '\n')
  f.write('decay=0.0005' + '\n')
  f.write('angle=0' + '\n')
  f.write('saturation = 1.5' + '\n')
  f.write('exposure = 1.5' + '\n')
  f.write('hue = .1' + '\n')
  f.write('\n')
  f.write('learning_rate=0.00261' + '\n') #0.001
  f.write('burn_in=1000' + '\n')
  ######you can adjust up and down to change training time#####
  ##Darknet does iterations with batches, not epochs####
  # max_batches = num_classes*2000
  max_batches = 2000
  f.write('max_batches=' + str(max_batches) + '\n')
  f.write('policy=steps' + '\n')
  steps1 = .8 * max_batches
  steps2 = .9 * max_batches
  f.write('steps='+str(steps1)+','+str(steps2) + '\n')

#Instructions from the darknet repo
#change line classes=80 to your number of objects in each of 3 [yolo]-layers:
#change [filters=255] to filters=(classes + 5)x3 in the 3 [convolutional] before each [yolo] layer, keep in mind that it only has to be the last [convolutional] before each of the [yolo] layers.

  with open('cfg/yolov4-custom2.cfg', 'r') as f2:
    content = f2.readlines()
    for line in content:
      f.write(line)    
    num_filters = (num_classes + 5) * 3
    f.write('filters='+str(num_filters) + '\n')
    f.write('activation=linear')
    f.write('\n')
    f.write('\n')
    f.write('[yolo]' + '\n')
    f.write('mask = 0,1,2' + '\n')
    f.write('anchors = 12, 16, 19, 36, 40, 28, 36, 75, 76, 55, 72, 146, 142, 110, 192, 243, 459, 401' + '\n')
    f.write('classes=' + str(num_classes) + '\n')

  with open('cfg/yolov4-custom3.cfg', 'r') as f3:
    content = f3.readlines()
    for line in content:
      f.write(line)    
    num_filters = (num_classes + 5) * 3
    f.write('filters='+str(num_filters) + '\n')
    f.write('activation=linear')
    f.write('\n')
    f.write('\n')
    f.write('[yolo]' + '\n')
    f.write('mask = 3,4,5' + '\n')
    f.write('anchors = 12, 16, 19, 36, 40, 28, 36, 75, 76, 55, 72, 146, 142, 110, 192, 243, 459, 401' + '\n')
    f.write('classes=' + str(num_classes) + '\n')

  with open('cfg/yolov4-custom4.cfg', 'r') as f4:
    content = f4.readlines()
    for line in content:
      f.write(line)    
    num_filters = (num_classes + 5) * 3
    f.write('filters='+str(num_filters) + '\n')
    f.write('activation=linear')
    f.write('\n')
    f.write('\n')
    f.write('[yolo]' + '\n')
    f.write('mask = 6,7,8' + '\n')
    f.write('anchors = 12, 16, 19, 36, 40, 28, 36, 75, 76, 55, 72, 146, 142, 110, 192, 243, 459, 401' + '\n')
    f.write('classes=' + str(num_classes) + '\n')
    
  with open('cfg/yolov4-custom5.cfg', 'r') as f5:
    content = f5.readlines()
    for line in content:
      f.write(line)

print("file is written!")

# Commented out IPython magic to ensure Python compatibility.
#here is the file that was just written. 
#you may consider adjusting certain things

#like the number of subdivisions 64 runs faster but Colab GPU may not be big enough
#if Colab GPU memory is too small, you will need to adjust subdivisions to 16
# %cat cfg/custom-yolov4-detector.cfg

"""Training custom YOLOv4 detector"""

!./darknet detector train data/obj.data cfg/custom-yolov4-detector.cfg yolov4.conv.137 -dont_show -map
#If you get CUDA out of memory adjust subdivisions above!
#adjust max batches down for shorter training above

"""Infer Custom Objects with Saved YOLOv4 Weights"""

# Commented out IPython magic to ensure Python compatibility.
#define utility function
def imShow(path):
  import cv2
  import matplotlib.pyplot as plt
#   %matplotlib inline

  image = cv2.imread(path)
  height, width = image.shape[:2]
  resized_image = cv2.resize(image,(3*width, 3*height), interpolation = cv2.INTER_CUBIC)

  fig = plt.gcf()
  fig.set_size_inches(18, 10)
  plt.axis("off")
  #plt.rcParams['figure.figsize'] = [10, 5]
  plt.imshow(cv2.cvtColor(resized_image, cv2.COLOR_BGR2RGB))
  plt.show()

#check if weigths have saved yet
#backup houses the last weights for our detector
#(file yolo-obj_last.weights will be saved to the build\darknet\x64\backup\ for each 100 iterations)
#(file yolo-obj_xxxx.weights will be saved to the build\darknet\x64\backup\ for each 1000 iterations)
#After training is complete - get result yolo-obj_final.weights from path build\darknet\x64\bac
!ls backup
#if it is empty you haven't trained for long enough yet, you need to train for at least 100 iterations

# Commented out IPython magic to ensure Python compatibility.
#coco.names is hardcoded somewhere in the detector
# %cp data/obj_short.names data/coco.names

"""Saving the weights"""

# Commented out IPython magic to ensure Python compatibility.
# %cp /content/darknet/cfg/custom-yolov4-detector.cfg /content/drive/MyDrive/Fish_detection/yolov4_conf50/
# %cp /content/darknet/backup/custom-yolov4-detector_final.weights /content/drive/MyDrive/Fish_detection/yolov4_conf50/

#/test has images that we can test our detector on
#test_images = [f for f in os.listdir('test') if f.endswith('.jpg')]
#import random
#img_path = "test/" + random.choice(test_images);
img_path = "/content/darknet/Fish_detection/images/vid3_frame142.jpg"

#test out our detector!
!./darknet detect cfg/custom-yolov4-detector.cfg backup/custom-yolov4-detector_final.weights {img_path} -dont-show
imShow('/content/darknet/predictions.jpg')

!cp -r /content/drive/MyDrive/Fish_detection/test /content/darknet/Fish_detection

!cp /content/drive/MyDrive/Fish_detection/yolov4_weights_short/custom-yolov4-detector.cfg /content/
!cp /content/drive/MyDrive/Fish_detection/yolov4_weights_short/custom-yolov4-detector_final.weights /content/

img_path = "/content/drive/MyDrive/Fish_detection/test/images/tvid10_frame0.jpg"

!./darknet detect /content/custom-yolov4-detector.cfg /content/custom-yolov4-detector_final.weights {img_path} -dont-show > log.txt | grep '%'
imShow('/content/darknet/predictions.jpg')

!./darknet detector demo /content/darknet/data/obj.data /content/custom-yolov4-detector.cfg /content/custom-yolov4-detector_final.weights -dont_show /content/drive/MyDrive/Fish_detection/fishclef_2015/test_set/videos/video_mp4/vid73.mp4  -i 0 -out_filename /content/drive/MyDrive/Fish_detection/fishclef_2015/test_set/videos/output.avi > log.txt

!cat log.txt | grep 'FPS\|%' > log1.txt

file1 = []
for i in range(300):
  name = "tvid73_frame"+str(i)+".jpg"
  file1.append(name)

log1 = open("./log1.txt", "r")
log2 = open("./log2.txt", "a")

file_num = -1
flag = 0

for line in log1:
    check_line = line.split(":")

    if "FPS" in check_line:
        line = line.split()
        file_num += 1
        if flag == 0:
            new_line = "   " + file1[file_num] + "  "
        else:
            new_line = "\n   " + file1[file_num] + "  "
        flag = 1
        log2.write(new_line)

    else:
        line = line.split()
        if flag == 1:
            new_line = ""
        else:
            new_line = "   " + file1[file_num] + "  "
        for word in line[:-1]:
            new_line += word + " "
        new_line += "\n"
        flag = 0
        log2.write(new_line)

log2.close()
log1.close()

import os

arr = os.listdir('/content/drive/MyDrive/Fish_detection/test/images/')

arr.sort()
arr

path = '/content/drive/MyDrive/Fish_detection/test/images/'
new_file = open("temp.txt", "a")
for i in range(len(arr)):
  img_name = path + arr[i] +'\n'
  new_file.write(img_name)
new_file.close

#creating txt file containing the path of all the img files as .jpg
import os

file_name = './filenames_onlyFish.txt'
path = './txt_file_onlyFish_shotData/'
list_fileName = []
count = 0
with open(file_name, 'r') as file:
    for line in file:
        data = line.split('.')
        list_fileName.append(data[0])
    for i in range(len(list_fileName)):
        name = list_fileName[i] + '.txt'
        with open(os.path.join(path, name), 'w') as fp:
            pass
file.close()

"""## **Multiple text files with 4 coord, confi-score, class ID**"""

!./darknet detector test /content/darknet/data/obj.data /content/custom-yolov4-detector.cfg /content/custom-yolov4-detector_final.weights -dont_show -ext_output < /content/yolov4_5species_test.txt > result.txt

